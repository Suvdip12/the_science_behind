// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

model User {
  id           String     @id
  name         String
  email        String?    @unique
  passwordHash String?
  googleId     String?
  avatarUrl    String?
  role         Role       @default(USER)
  isAdmin      Boolean    @default(false)
  createdAt    DateTime   @default(now())
  posts        Post[]
  sessions     Session[]
  comments     Comment[]
  likes        Like[]
  bookmarks    Bookmark[]

  @@map("users")
}

enum Role {
  USER
  ADMIN
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@map("sessions")
}

model Post {
  id          String     @id @default(cuid())
  title       String
  slug        String     @unique
  content     String
  description String
  topics      String[]
  attachments Media[]
  publish     Boolean    @default(true)
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes       Like[]
  bookmarks   Bookmark[]
  comments    Comment[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt()

  @@map("posts")
}

model Topic {
  id            String   @id @default(uuid())
  userId        String   @unique
  selectedTopic String[]

  @@map("topics")
}

model Like {
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("likes")
}

model Bookmark {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("bookmarks")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@map("comments")
}

model Media {
  id     String    @id @default(cuid())
  postId String?
  post   Post?     @relation(fields: [postId], references: [id], onDelete: SetNull)
  type   MediaType @default(IMAGE)
  url    String

  @@map("post_media")
}

enum MediaType {
  IMAGE
  VIDEO
}
